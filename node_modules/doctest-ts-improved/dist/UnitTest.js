"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ScriptExtraction_1 = require("./ScriptExtraction");
/**
 * Represents a single unit test somewhere in a file.
 */
class UnitTest {
    constructor(body, context, extraImports) {
        this.body = body;
        this.context = context;
        this._extraImports = extraImports;
    }
    static FromComment(comment, context) {
        const imports = ScriptExtraction_1.ScriptExtraction.extractImports(comment);
        return ScriptExtraction_1.ScriptExtraction.extractScripts(comment).map(({ script, name }, i) => {
            var _a;
            return new UnitTest(script, Object.assign(Object.assign({}, context), { linenumber: ((_a = context.linenumber) !== null && _a !== void 0 ? _a : 0), testname: name !== null && name !== void 0 ? name : 'doctest ' + i }), imports);
        });
    }
    static FromComments(comms) {
        const result = [];
        for (const comm of comms) {
            result.push(...UnitTest.FromComment(comm.comment, comm.context));
        }
        return result;
    }
    getImports() {
        return [...this._extraImports, 'import "mocha"', 'import {expect as __expect} from "chai"'];
    }
    /**
     * Generates the mocha test code for this unit test.
     * Will only construct the 'it('should ....') { __expect(x).deep.eq(y) } part
     */
    generateCode() {
        const script = this.body
            .map(s => {
            var _a;
            if (s.tag == 'Statement') {
                return s.stmt;
            }
            else {
                return `__expect(${s.lhs}, "failed at ${this.context.functionname} (${this.context.filepath}:${1 + s.line + ((_a = this.context.linenumber) !== null && _a !== void 0 ? _a : 0)}:1)").to.deep.equal(${s.rhs})`;
            }
        })
            .map(x => '\n        ' + x)
            .join('');
        return `it(${this.getName()}, async () => {${script}\n})`;
    }
    getName() {
        var _a;
        return JSON.stringify((_a = this.context.testname) !== null && _a !== void 0 ? _a : this.context.functionname);
    }
}
exports.default = UnitTest;
//# sourceMappingURL=UnitTest.js.map