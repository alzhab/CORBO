#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const TestCreator_1 = require("./TestCreator");
function readDirRecSync(path, maxDepth = 999) {
    const result = [];
    if (maxDepth <= 0) {
        return [];
    }
    for (const entry of (0, fs_1.readdirSync)(path)) {
        const fullEntry = path + "/" + entry;
        const stats = (0, fs_1.lstatSync)(fullEntry);
        if (stats.isDirectory()) {
            // Subdirectory
            // @ts-ignore
            result.push(...readDirRecSync(fullEntry, maxDepth - 1));
        }
        else {
            result.push(fullEntry);
        }
    }
    return result;
}
function main() {
    const args = process.argv;
    console.log(args.join(","));
    const directory = args[2].replace(/\/$/, "");
    if (directory === "--require") {
        console.error("Probably running the testsuite, detects '--require' as second argument. Quitting now");
        return;
    }
    const argv = require('process-yargs-parser')(process.argv.slice(2), { "duplicate-arguments-array": true });
    if (directory === undefined) {
        console.log("Usage: doctest-ts-improved <directory under test> [--ignore regexp]. This will automatically scan recursively for '.ts'-files, excluding 'node_modules' and '*.doctest.ts'-files.");
    }
    let blacklistPatterns = argv["ignore"];
    let files = readDirRecSync(argv._[0])
        .filter(p => p.endsWith(".ts"))
        .filter(p => p.indexOf("/node_modules/") < 0 && !p.endsWith(".doctest.ts"));
    if (blacklistPatterns !== undefined) {
        if (typeof blacklistPatterns === "string") {
            blacklistPatterns = [blacklistPatterns];
        }
        const ignored = [];
        files = files.filter(p => {
            const isIgnored = blacklistPatterns.some(blacklistPattern => p.match(new RegExp(blacklistPattern)) !== null);
            if (isIgnored) {
                ignored.push(p);
            }
            return !isIgnored;
        });
        if (argv.verbose) {
            console.log("Ignored the following files as they match the ignore pattern", blacklistPatterns.join(","), "\n", ignored.join(", "));
        }
    }
    const noTests = [];
    let totalTests = 0;
    let totalFilesWithTests = 0;
    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        process.stdout.write(`\r (${i}/${files.length}) inspecting ${file}                                     \r`);
        const generated = new TestCreator_1.default(file).createTest();
        if (generated === 0) {
            noTests.push(file);
        }
        else {
            totalFilesWithTests++;
            totalTests += generated;
            console.log("Generated tests for " + file + "files (" + generated + " tests found)");
        }
    }
    console.log(`Generated ${totalTests} tests found in ${totalFilesWithTests} different files. ${Math.round(100 * totalFilesWithTests / (totalFilesWithTests + noTests.length))}% of the files have at least one test`);
    if (noTests.length > 0) {
        const i = Math.round(Math.random() * noTests.length);
        const randomFile = noTests[i];
        console.log(`No tests found in ${noTests.length} files. We suggest making a test for ${randomFile} - it'll benefit from it`);
    }
}
main();
//# sourceMappingURL=main.js.map