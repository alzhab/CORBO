{
  "swagger": "2.0",
  "info": {
    "title": "Quiz API",
    "version": "v1"
  },
  "host": "195.49.212.144",
  "schemes": [
    "http"
  ],
  "basePath": "/api",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/blockchain/balance/": {
      "get": {
        "operationId": "blockchain_balance_list",
        "description": "Получить баланс",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          }
        },
        "tags": [
          "blockchain"
        ]
      },
      "parameters": []
    },
    "/blockchain/transactions/": {
      "get": {
        "operationId": "blockchain_transactions_list",
        "description": "Получить список транзакции",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The initial index from which to return the results.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransactionUserInfoRead"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "blockchain"
        ]
      },
      "parameters": []
    },
    "/catalog/themes/": {
      "get": {
        "operationId": "catalog_themes_list",
        "description": "Список тем",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThemeRead"
            }
          }
        },
        "tags": [
          "catalog"
        ]
      },
      "parameters": []
    },
    "/followers/action/accept/{follower_id}/": {
      "post": {
        "operationId": "followers_action_accept_create",
        "description": "Принять дружбу",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FollowFriend"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": [
        {
          "name": "follower_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/followers/action/cancel/{follower_id}/": {
      "post": {
        "operationId": "followers_action_cancel_create",
        "description": "Отменить дружбу",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": [
        {
          "name": "follower_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/followers/action/delete/{follower_id}/": {
      "delete": {
        "operationId": "followers_action_delete_delete",
        "description": "Удалить из друзей",
        "parameters": [],
        "responses": {},
        "tags": [
          "followers"
        ]
      },
      "parameters": [
        {
          "name": "follower_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/followers/action/follow/": {
      "post": {
        "operationId": "followers_action_follow_create",
        "description": "Предложить дружбу",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequirement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FollowOutput"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": []
    },
    "/followers/action/reject/{follower_id}/": {
      "post": {
        "operationId": "followers_action_reject_create",
        "description": "Отклонить дружбу",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FollowOutput"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": [
        {
          "name": "follower_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/followers/blacklist/": {
      "get": {
        "operationId": "followers_blacklist_list",
        "description": "Посмотреть черный список",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BlackList"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": []
    },
    "/followers/blacklist/add/": {
      "post": {
        "operationId": "followers_blacklist_add_create",
        "description": "Добавить в черный список",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequirement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BlackList"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": []
    },
    "/followers/blacklist/delete/{blacklist_id}/": {
      "delete": {
        "operationId": "followers_blacklist_delete_delete",
        "description": "Удалить из черного списка",
        "parameters": [],
        "responses": {},
        "tags": [
          "followers"
        ]
      },
      "parameters": [
        {
          "name": "blacklist_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/followers/friends/": {
      "get": {
        "operationId": "followers_friends_list",
        "description": "Посмотреть список друзей (со статусом ACCEPT)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FollowFriend"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": []
    },
    "/followers/invites/": {
      "get": {
        "operationId": "followers_invites_list",
        "description": "Посмотреть список заявок на дружбу, отправленные к вам (со статусом PENDING)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FollowOutput"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": []
    },
    "/followers/pending/": {
      "get": {
        "operationId": "followers_pending_list",
        "description": "Посмотреть список отправленных друзей (со статусом PENDING)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FollowOutput"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": []
    },
    "/followers/search/": {
      "post": {
        "operationId": "followers_search_create",
        "description": "Поиск по всем пользователям",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Search"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        },
        "tags": [
          "followers"
        ]
      },
      "parameters": []
    },
    "/game/answer/{game_question_id}/": {
      "post": {
        "operationId": "game_answer_create",
        "description": "Ответить на вопрос.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GameCreate"
            }
          }
        ],
        "responses": {},
        "tags": [
          "game"
        ]
      },
      "parameters": [
        {
          "name": "game_question_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/game/cancel/{game_id}/": {
      "post": {
        "operationId": "game_cancel_create",
        "description": "Отменить игру",
        "parameters": [],
        "responses": {},
        "tags": [
          "game"
        ]
      },
      "parameters": [
        {
          "name": "game_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/game/create/": {
      "post": {
        "operationId": "game_create_create",
        "description": "Создать игру",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GameCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": []
    },
    "/game/create_huge/": {
      "post": {
        "operationId": "game_create_huge_create",
        "description": "Создать huge game, временная апишка, вместо этого будет отложенная задача на определенное время",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": []
    },
    "/game/get/": {
      "get": {
        "operationId": "game_get_list",
        "description": "Получить текущую игру",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": []
    },
    "/game/get_huge/": {
      "get": {
        "operationId": "game_get_huge_list",
        "description": "Получить huge game",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": []
    },
    "/game/invites/accept/{game_invite_id}/": {
      "post": {
        "operationId": "game_invites_accept_create",
        "description": "Принять приглашение для DUEL или JOUST",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": [
        {
          "name": "game_invite_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/game/invites/decline/{game_invite_id}/": {
      "post": {
        "operationId": "game_invites_decline_create",
        "description": "Отклонить приглашение для DUEL или JOUST",
        "parameters": [],
        "responses": {},
        "tags": [
          "game"
        ]
      },
      "parameters": [
        {
          "name": "game_invite_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/game/invites/list/": {
      "get": {
        "operationId": "game_invites_list_list",
        "description": "Список приглашении для DUEL или JOUST",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameInviteRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": []
    },
    "/game/join_open/{game_id}/": {
      "post": {
        "operationId": "game_join_open_create",
        "description": "Подключиться к открытой игре (Huge, Brain Joust, Brain Duel)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": [
        {
          "name": "game_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/game/list_open/": {
      "get": {
        "operationId": "game_list_open_list",
        "description": "Список открытых игр",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": []
    },
    "/game/question/{game_id}/": {
      "get": {
        "operationId": "game_question_read",
        "description": "Получить активный вопрос по игре",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameQuestionRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": [
        {
          "name": "game_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/game/ready/{game_id}/": {
      "post": {
        "operationId": "game_ready_create",
        "description": "Готовность к игре",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": [
        {
          "name": "game_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/game/result/{game_id}/": {
      "get": {
        "operationId": "game_result_read",
        "description": "Получить результат игры",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameGetRead"
            }
          }
        },
        "tags": [
          "game"
        ]
      },
      "parameters": [
        {
          "name": "game_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/guide/instructions/": {
      "get": {
        "operationId": "guide_instructions_list",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InstructionsOutput"
            }
          }
        },
        "tags": [
          "guide"
        ]
      },
      "parameters": []
    },
    "/guide/rules/{game_type}": {
      "get": {
        "operationId": "guide_rules_read",
        "description": "Правила игры, с учетом языка пользователя Варианты: [DUEL, JOUST, BRAINDUEL, BRAINJOUST, HUGE]. Или можно в респонсе посмотреть game_type",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GameRule"
            }
          }
        },
        "tags": [
          "guide"
        ]
      },
      "parameters": [
        {
          "name": "game_type",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/guide/terms_of_use/": {
      "get": {
        "operationId": "guide_terms_of_use_list",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TermsOfUseOutput"
            }
          }
        },
        "tags": [
          "guide"
        ]
      },
      "parameters": []
    },
    "/store/": {
      "get": {
        "operationId": "store_list",
        "description": "Получить список подсказок магазина",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/HintOutput"
            }
          }
        },
        "tags": [
          "store"
        ]
      },
      "parameters": []
    },
    "/store/create/": {
      "post": {
        "operationId": "store_create_create",
        "description": "Купить подсказку",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserHintInput"
            }
          }
        ],
        "responses": {},
        "tags": [
          "store"
        ]
      },
      "parameters": []
    },
    "/store/create/legacy/": {
      "post": {
        "operationId": "store_create_legacy_create",
        "description": "Купить подсказку",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserHintLegacyInput"
            }
          }
        ],
        "responses": {},
        "tags": [
          "store"
        ]
      },
      "parameters": []
    },
    "/store/user-hints/": {
      "get": {
        "operationId": "store_user-hints_list",
        "description": "Получить список подсказок пользователя",
        "parameters": [],
        "responses": {},
        "tags": [
          "store"
        ]
      },
      "parameters": []
    },
    "/support/faq/": {
      "get": {
        "operationId": "support_faq_list",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FAQOutput"
            }
          }
        },
        "tags": [
          "support"
        ]
      },
      "parameters": []
    },
    "/support/support_message/": {
      "post": {
        "operationId": "support_support_message_create",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SupportMessageInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SupportMessageInput"
            }
          }
        },
        "tags": [
          "support"
        ]
      },
      "parameters": []
    },
    "/token/": {
      "post": {
        "operationId": "token_create",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenObtainPair"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TokenObtainPair"
            }
          }
        },
        "tags": [
          "token"
        ]
      },
      "parameters": []
    },
    "/token/refresh/": {
      "post": {
        "operationId": "token_refresh_create",
        "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TokenRefresh"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TokenRefresh"
            }
          }
        },
        "tags": [
          "token"
        ]
      },
      "parameters": []
    },
    "/token/verify/": {
      "post": {
        "operationId": "token_verify_create",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthVerify"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthVerify"
            }
          }
        },
        "tags": [
          "token"
        ]
      },
      "parameters": []
    },
    "/user/": {
      "post": {
        "operationId": "user_create",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TokenObtainPair"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/code/": {
      "post": {
        "operationId": "user_code_create",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCodeInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserCodeInput"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/delete/me/": {
      "post": {
        "operationId": "user_delete_me_create",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/devices/": {
      "post": {
        "operationId": "user_devices_create",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FCMDevice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FCMDevice"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/get_rebind_hash/": {
      "get": {
        "operationId": "user_get_rebind_hash_list",
        "description": "Генерация нового рандомного хэш ключа для перепривязки кошелька, таймаут хранения ключа 72000с(24часа)",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/info/{user_id}/": {
      "get": {
        "operationId": "user_info_read",
        "description": "Получить данные пользователя, также статус дружбы.\n-> following_user - Это тот кто отправил запрос.\n-> followed_user - Это кому отправили запрос.\n-> blocking_user - Это тот кто добавил в черный список.\n-> blocked_user - Это тот кого добавили в черный список.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/user/me/": {
      "get": {
        "operationId": "user_me_list",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserOutput"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/notifications/": {
      "get": {
        "operationId": "user_notifications_list",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The initial index from which to return the results.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NotificationOutput"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/promo/create/": {
      "post": {
        "operationId": "user_promo_create_create",
        "description": "Создать промокод",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserPromoRead"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/promo/get/": {
      "get": {
        "operationId": "user_promo_get_list",
        "description": "Получить свой промокод",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserPromoRead"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/rebind/": {
      "post": {
        "operationId": "user_rebind_create",
        "description": "Перепривязка кошелька, проверяется хэш код, если успешно удаляет хэш код",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RebindVerify"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RebindVerify"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/test/notification/": {
      "post": {
        "operationId": "user_test_notification_create",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestNotificationInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TestNotificationInput"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/update/": {
      "patch": {
        "operationId": "user_update_partial_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserOutput"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/ws/message/": {
      "post": {
        "operationId": "ws_message_create",
        "description": "Временная апишка для тестирования вебсокета. Доступные events: 'PING'",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RealtimeMessage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RealtimeMessage"
            }
          }
        },
        "tags": [
          "ws"
        ]
      },
      "parameters": []
    }
  },
  "definitions": {
    "Balance": {
      "description": "",
      "required": [
        "balance",
        "currency"
      ],
      "type": "object",
      "properties": {
        "balance": {
          "title": "Balance",
          "type": "string",
          "format": "decimal"
        },
        "currency": {
          "title": "Currency",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "TransactionUserInfoRead": {
      "description": "Transaction(id, created_at, updated_at, from_address, to_address, value, transaction_hash, log_index, block_number)",
      "required": [
        "from_address",
        "to_address",
        "transaction_hash",
        "log_index"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "from_user_info": {
          "title": "From user info",
          "type": "string",
          "readOnly": true
        },
        "to_user_info": {
          "title": "To user info",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "from_address": {
          "title": "From address",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "to_address": {
          "title": "To address",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "value": {
          "title": "Value",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "transaction_hash": {
          "title": "Transaction hash",
          "type": "string",
          "maxLength": 512,
          "minLength": 1
        },
        "log_index": {
          "title": "Log index",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "block_number": {
          "title": "Block number",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        }
      }
    },
    "ThemeRead": {
      "description": "Theme(id, created_at, updated_at, language, name, parent, svg)",
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "language": {
          "title": "Language",
          "type": "string",
          "enum": [
            "en",
            "ru"
          ]
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "minLength": 1,
          "x-nullable": true
        },
        "svg": {
          "title": "Svg",
          "type": "string",
          "x-nullable": true
        },
        "parent": {
          "title": "Parent",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "UserInfo": {
      "title": "Friend",
      "description": "BaseUser(id, password, last_login, is_superuser, created_at, updated_at, language, username, image, is_active, is_admin, wallet_address, part_password, code, is_secure)",
      "required": [
        "username"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "username": {
          "title": "Username",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "image": {
          "title": "Image",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FollowFriend": {
      "description": "Follower(id, created_at, updated_at, followed_user, following_user, accepted_at, rejected_at, status)",
      "type": "object",
      "properties": {
        "accepted_at": {
          "title": "Accepted at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejected_at": {
          "title": "Rejected at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "status": {
          "title": "Status",
          "type": "string",
          "enum": [
            "PENDING",
            "ACCEPT",
            "REJECT"
          ]
        },
        "friend": {
          "$ref": "#/definitions/UserInfo"
        },
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "UserRequirement": {
      "description": "",
      "required": [
        "user"
      ],
      "type": "object",
      "properties": {
        "user": {
          "title": "User",
          "type": "integer"
        }
      }
    },
    "FollowOutput": {
      "description": "Follower(id, created_at, updated_at, followed_user, following_user, accepted_at, rejected_at, status)",
      "required": [
        "followed_user",
        "following_user",
        "status"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "followed_user": {
          "$ref": "#/definitions/UserInfo"
        },
        "following_user": {
          "$ref": "#/definitions/UserInfo"
        },
        "status": {
          "title": "Status",
          "type": "string",
          "enum": [
            "PENDING",
            "ACCEPT",
            "REJECT"
          ]
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "accepted_at": {
          "title": "Accepted at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "rejected_at": {
          "title": "Rejected at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "BlackList": {
      "description": "BlackList(id, created_at, updated_at, blocked_user, blocking_user)",
      "required": [
        "blocking_user",
        "blocked_user"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "blocking_user": {
          "$ref": "#/definitions/UserInfo"
        },
        "blocked_user": {
          "$ref": "#/definitions/UserInfo"
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Search": {
      "description": "",
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "text": {
          "title": "Text",
          "type": "string",
          "maxLength": 30,
          "minLength": 2
        },
        "only_friends": {
          "title": "Only friends",
          "type": "boolean",
          "default": false
        }
      }
    },
    "GameCreate": {
      "description": "",
      "required": [
        "bet_amount",
        "theme",
        "invited_friends",
        "game_type"
      ],
      "type": "object",
      "properties": {
        "bet_amount": {
          "title": "Bet amount",
          "type": "integer"
        },
        "theme": {
          "title": "Theme",
          "type": "integer"
        },
        "invited_friends": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "uniqueItems": true
        },
        "max_players_count": {
          "title": "Max players count",
          "type": "integer",
          "default": 4
        },
        "game_type": {
          "title": "Game type",
          "type": "string",
          "enum": [
            "DUEL",
            "JOUST",
            "BRAINDUEL",
            "BRAINJOUST",
            "HUGE"
          ]
        }
      }
    },
    "PlayerRead": {
      "description": "Player(id, created_at, updated_at, user, game, is_owner, is_viewer, ready, ready_at)",
      "required": [
        "user"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "ready": {
          "title": "Ready",
          "type": "boolean"
        },
        "ready_at": {
          "title": "Ready at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "boolean"
        },
        "is_viewer": {
          "title": "Is viewer",
          "type": "boolean"
        }
      }
    },
    "GameRead": {
      "description": "Game(id, created_at, updated_at, theme, game_type, status, bet_amount, max_players_count, cancelled_reason, cancelled_at, started_at, purchased_at, ended_at, huge_link)",
      "required": [
        "players"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "players": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerRead"
          }
        },
        "theme": {
          "title": "Theme",
          "type": "string",
          "readOnly": true
        },
        "results": {
          "title": "Results",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "game_type": {
          "title": "Game type",
          "type": "string",
          "enum": [
            "DUEL",
            "JOUST",
            "BRAINDUEL",
            "BRAINJOUST",
            "HUGE"
          ]
        },
        "status": {
          "title": "Status",
          "type": "string",
          "enum": [
            "WAITING",
            "STARTED",
            "CANCELLED",
            "ONGOING",
            "PURCHASING",
            "ENDED"
          ]
        },
        "bet_amount": {
          "title": "Bet amount",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "max_players_count": {
          "title": "Max players count",
          "type": "integer",
          "maximum": 32767,
          "minimum": 0
        },
        "cancelled_reason": {
          "title": "Cancelled reason",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "cancelled_at": {
          "title": "Cancelled at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "started_at": {
          "title": "Started at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "purchased_at": {
          "title": "Purchased at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "ended_at": {
          "title": "Ended at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "huge_link": {
          "title": "Huge link",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "x-nullable": true
        }
      }
    },
    "GameShortRead": {
      "title": "Game",
      "description": "Game(id, created_at, updated_at, theme, game_type, status, bet_amount, max_players_count, cancelled_reason, cancelled_at, started_at, purchased_at, ended_at, huge_link)",
      "type": "object",
      "properties": {
        "bet_amount": {
          "title": "Bet amount",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "theme": {
          "title": "Theme",
          "type": "integer",
          "x-nullable": true
        },
        "max_players_count": {
          "title": "Max players count",
          "type": "integer",
          "maximum": 32767,
          "minimum": 0
        },
        "game_type": {
          "title": "Game type",
          "type": "string",
          "enum": [
            "DUEL",
            "JOUST",
            "BRAINDUEL",
            "BRAINJOUST",
            "HUGE"
          ]
        }
      }
    },
    "GameInviteRead": {
      "description": "GameInvite(id, created_at, updated_at, game, user)",
      "required": [
        "game"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "game": {
          "$ref": "#/definitions/GameShortRead"
        }
      }
    },
    "GameQuestionRead": {
      "description": "GameQuestion(id, created_at, updated_at, question, game, started_at, ended_at, position, total)",
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "started_at": {
          "title": "Started at",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "question": {
          "title": "Question",
          "type": "string",
          "readOnly": true
        },
        "total": {
          "title": "Total",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "position": {
          "title": "Position",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        }
      }
    },
    "GameResult": {
      "description": "GameResult(id, created_at, updated_at, game, player, winning_amount, correct_answers_count)",
      "required": [
        "player"
      ],
      "type": "object",
      "properties": {
        "winning_amount": {
          "title": "Winning amount",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "correct_answers_count": {
          "title": "Correct answers count",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "player": {
          "$ref": "#/definitions/PlayerRead"
        }
      }
    },
    "GameGetRead": {
      "description": "Game(id, created_at, updated_at, theme, game_type, status, bet_amount, max_players_count, cancelled_reason, cancelled_at, started_at, purchased_at, ended_at, huge_link)",
      "required": [
        "results"
      ],
      "type": "object",
      "properties": {
        "bet_amount": {
          "title": "Bet amount",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "theme": {
          "title": "Theme",
          "type": "string",
          "readOnly": true
        },
        "game_type": {
          "title": "Game type",
          "type": "string",
          "enum": [
            "DUEL",
            "JOUST",
            "BRAINDUEL",
            "BRAINJOUST",
            "HUGE"
          ]
        },
        "results": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GameResult"
          }
        }
      }
    },
    "InstructionsOutput": {
      "description": "Instructions(id, created_at, updated_at, language, title, description)",
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "GameRule": {
      "description": "GameRule(id, created_at, updated_at, language, game_type, title, description)",
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "language": {
          "title": "Language",
          "type": "string",
          "enum": [
            "en",
            "ru"
          ],
          "default": "en"
        },
        "game_type": {
          "title": "Game type",
          "type": "string",
          "enum": [
            "DUEL",
            "JOUST",
            "BRAINDUEL",
            "BRAINJOUST",
            "HUGE"
          ],
          "default": "DUEL"
        },
        "title": {
          "title": "Title",
          "type": "string",
          "maxLength": 500,
          "x-nullable": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "TermsOfUseOutput": {
      "description": "TermsOfUse(id, created_at, updated_at, language, title, description)",
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "title": {
          "title": "Title",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "HintOutput": {
      "description": "Hint(id, created_at, updated_at, language, hint_type, costs, description)",
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "language": {
          "title": "Language",
          "type": "string",
          "enum": [
            "en",
            "ru"
          ]
        },
        "hint_type": {
          "title": "Hint type",
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ]
        },
        "costs": {
          "title": "Costs",
          "type": "number"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 1000,
          "x-nullable": true
        }
      }
    },
    "UserHintInput": {
      "description": "",
      "required": [
        "hint_id",
        "quantity",
        "deadline",
        "signature"
      ],
      "type": "object",
      "properties": {
        "hint_id": {
          "title": "Hint id",
          "type": "integer"
        },
        "quantity": {
          "title": "Quantity",
          "type": "integer",
          "minimum": 0
        },
        "deadline": {
          "title": "Deadline",
          "type": "integer",
          "minimum": 0
        },
        "signature": {
          "title": "Signature",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "UserHintLegacyInput": {
      "description": "",
      "required": [
        "hint_id",
        "quantity",
        "transaction_hash"
      ],
      "type": "object",
      "properties": {
        "hint_id": {
          "title": "Hint id",
          "type": "integer"
        },
        "quantity": {
          "title": "Quantity",
          "type": "integer",
          "minimum": 0
        },
        "transaction_hash": {
          "title": "Transaction hash",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "FAQOutput": {
      "description": "FAQ(id, created_at, updated_at, language, question, answer)",
      "type": "object",
      "properties": {
        "question": {
          "title": "Question",
          "type": "string",
          "maxLength": 2000,
          "minLength": 1,
          "x-nullable": true
        },
        "answer": {
          "title": "Answer",
          "type": "string",
          "maxLength": 2000,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "SupportMessageInput": {
      "description": "SupportMessage(id, created_at, updated_at, to_email, user, message, status)",
      "required": [
        "to_email",
        "message"
      ],
      "type": "object",
      "properties": {
        "to_email": {
          "title": "To email",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "minLength": 1
        },
        "message": {
          "title": "Message",
          "type": "string",
          "maxLength": 2000,
          "minLength": 1
        }
      }
    },
    "TokenObtainPair": {
      "description": "",
      "required": [
        "username",
        "password"
      ],
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "title": "Password",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "TokenRefresh": {
      "description": "",
      "required": [
        "refresh"
      ],
      "type": "object",
      "properties": {
        "refresh": {
          "title": "Refresh",
          "type": "string",
          "minLength": 1
        },
        "access": {
          "title": "Access",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "AuthVerify": {
      "description": "",
      "required": [
        "message",
        "signature"
      ],
      "type": "object",
      "properties": {
        "message": {
          "title": "Message",
          "type": "string",
          "minLength": 1
        },
        "signature": {
          "title": "Signature",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "UserInput": {
      "description": "BaseUser(id, password, last_login, is_superuser, created_at, updated_at, language, username, image, is_active, is_admin, wallet_address, part_password, code, is_secure)",
      "required": [
        "username",
        "message",
        "signature"
      ],
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "message": {
          "title": "Message",
          "type": "string",
          "minLength": 1
        },
        "signature": {
          "title": "Signature",
          "type": "string",
          "minLength": 1
        },
        "promo": {
          "title": "Promo",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "UserCodeInput": {
      "description": "",
      "required": [
        "code"
      ],
      "type": "object",
      "properties": {
        "code": {
          "title": "Code",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "FCMDevice": {
      "description": "FCMDevice(id, name, active, user, date_created, device_id, registration_id, type)",
      "required": [
        "registration_id",
        "type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "registration_id": {
          "title": "Registration token",
          "type": "string",
          "minLength": 1
        },
        "device_id": {
          "title": "Device ID",
          "description": "Unique device identifier",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "active": {
          "title": "Is active",
          "description": "Inactive devices will not be sent notifications",
          "type": "boolean",
          "default": true
        },
        "date_created": {
          "title": "Creation date",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "type": {
          "title": "Type",
          "type": "string",
          "enum": [
            "ios",
            "android",
            "web"
          ]
        }
      }
    },
    "UserOutput": {
      "description": "BaseUser(id, password, last_login, is_superuser, created_at, updated_at, language, username, image, is_active, is_admin, wallet_address, part_password, code, is_secure)",
      "required": [
        "username",
        "wallet_address"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "username": {
          "title": "Username",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "wallet_address": {
          "title": "Wallet address",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "language": {
          "title": "Language",
          "type": "string",
          "enum": [
            "en",
            "ru"
          ]
        },
        "image": {
          "title": "Image",
          "type": "string",
          "readOnly": true,
          "format": "uri"
        },
        "notification_count": {
          "title": "Notification count",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "NotificationOutput": {
      "description": "UserNotification(id, created_at, updated_at, user, title, description, is_viewed)",
      "required": [
        "title",
        "description"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "title": {
          "title": "Title",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "minLength": 1
        },
        "is_viewed": {
          "title": "Is viewed",
          "type": "boolean"
        }
      }
    },
    "UserPromoRead": {
      "description": "UserPromo(id, created_at, updated_at, user, code, bonus_amount)",
      "type": "object",
      "properties": {
        "code": {
          "title": "Code",
          "type": "string",
          "maxLength": 10,
          "minLength": 1,
          "x-nullable": true
        },
        "bonus_amount": {
          "title": "Bonus amount",
          "type": "number"
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "RebindVerify": {
      "description": "",
      "required": [
        "message",
        "signature",
        "hash_value"
      ],
      "type": "object",
      "properties": {
        "message": {
          "title": "Message",
          "type": "string",
          "minLength": 1
        },
        "signature": {
          "title": "Signature",
          "type": "string",
          "minLength": 1
        },
        "hash_value": {
          "title": "Hash value",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "TestNotificationInput": {
      "description": "",
      "required": [
        "registration_id",
        "type"
      ],
      "type": "object",
      "properties": {
        "registration_id": {
          "title": "Registration id",
          "type": "string",
          "minLength": 1
        },
        "type": {
          "title": "Type",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "UserUpdate": {
      "description": "BaseUser(id, password, last_login, is_superuser, created_at, updated_at, language, username, image, is_active, is_admin, wallet_address, part_password, code, is_secure)",
      "required": [
        "username"
      ],
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "language": {
          "title": "Language",
          "type": "string",
          "enum": [
            "en",
            "ru"
          ]
        },
        "image": {
          "title": "Image",
          "type": "string",
          "readOnly": true,
          "format": "uri"
        },
        "delete_image": {
          "title": "Delete image",
          "type": "boolean"
        }
      }
    },
  }
}
